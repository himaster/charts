apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ipfs-cluster.statefulsetName" . }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  serviceName: {{ include "ipfs-cluster.serviceName" . }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        checksum/config-bootstrap: {{ include (print $.Template.BasePath "/configmap-bootstrap.yaml") . | sha256sum }}  
        checksum/config-env: {{ include (print $.Template.BasePath "/configmap-env.yaml") . | sha256sum }}  
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: configure-ipfs
          image: {{ .Values.ipfsImage.repo }}:{{ .Values.ipfsImage.tag }}
          env:
            - name: IPFS_DATASTORE_STORAGEMAX
              value: "{{ .Values.ipfs.datastoreStorageMax }}"
          command: ["sh", "/custom/configure-ipfs.sh"]
          volumeMounts:
            - name: ipfs-storage
              mountPath: /data/ipfs
            - name: configure-script
              mountPath: /custom
      containers:
        - name: ipfs
          image: {{ .Values.ipfsImage.repo }}:{{ .Values.ipfsImage.tag }}
          imagePullPolicy: IfNotPresent
          args:
            - daemon
            - --migrate=true
            - --agent-version-suffix=docker
            - --enable-gc
          env:
            - name: IPFS_FD_MAX
              value: "4096"
          ports:
            - name: swarm
              protocol: TCP
              containerPort: 4001
            - name: swarm-udp
              protocol: UDP
              containerPort: 4002
            - name: api
              protocol: TCP
              containerPort: 5001
            - name: ws
              protocol: TCP
              containerPort: 8081
            - name: gateway
              protocol: TCP
              containerPort: 8080
          readinessProbe:
            tcpSocket:
              port: swarm
            initialDelaySeconds: 5
            periodSeconds: 15
          volumeMounts:
            - name: ipfs-storage
              mountPath: /data/ipfs
            - name: configure-script
              mountPath: /custom
            - name: health-storage
              mountPath: /data/health
          resources:
            {}
        - name: ipfs-cluster
          image: {{ .Values.ipfsClusterImage.repo }}:{{ .Values.ipfsClusterImage.tag }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "/custom/entrypoint.sh"]
          envFrom:
            - configMapRef:
                name: {{ include "ipfs-cluster.configmapEnvName" . }}
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: BOOTSTRAP_PEER_ID
              valueFrom:
                configMapKeyRef:
                  name: {{ include "ipfs-cluster.configmapEnvName" . }}
                  key: bootstrap-peer-id
            - name: BOOTSTRAP_PEER_PRIV_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ipfs-cluster.secretName" . }}
                  key: bootstrap-peer-priv-key
            - name: CLUSTER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "ipfs-cluster.secretName" . }}
                  key: cluster-secret
            - name: CLUSTER_REPLICATIONFACTORMIN
              value: "{{ .Values.clusterReplicationFactorMin }}"
            - name: CLUSTER_REPLICATIONFACTORMAX
              value: "{{ .Values.clusterReplicationFactorMax }}"
            - name: CLUSTER_MONITOR_PING_INTERVAL
              value: "3m"
            - name: CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS
              value: "/ip4/0.0.0.0/tcp/9094"
            - name: CLUSTER_RESTAPI_LIBP2PLISTENMULTIADDRESS
              value: "/ip4/0.0.0.0/tcp/9098"
            - name: CLUSTER_RESTAPI_ID
              value: {{ .Values.clusterRestApiId }}
            - name: CLUSTER_RESTAPI_PRIVATEKEY
              value: "{{ .Values.clusterRestApiPrivateKey }}"
            - name: CLUSTER_RESTAPI_BASICAUTHCREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: {{ include "ipfs-cluster.secretName" . }}
                  key: cluster-restapi-basicauth
            - name: CLUSTER_MONITORPINGINTERVAL
              value: {{ .Values.clusterMonitorPingInterval }}
            - name: CLUSTER_CRDT_TRUSTEDPEERS
              value: "{{ .Values.clusterCRDTtrustedPeers }}"
            - name: SVC_NAME
              value: {{ include "ipfs-cluster.serviceName" . }}
            {{- if .Values.monitor.enabled }}
            - name: CLUSTER_METRICS_ENABLESTATS
              value: "{{ .Values.monitor.enabled }}"
            - name: CLUSTER_METRICS_PROMETHEUSENDPOINT
              value: "/ip4/0.0.0.0/tcp/8888/"
            - name: CLUSTER_METRICS_REPORTING_INTERVAL
              value: "15s"
            {{- end }}
            - name: CLUSTER_LEAVEONSHUTDOWN
              value: "true"
            {{- if .Values.tracing.enabled  }}
            - name: CLUSTER_TRACING_ENABLETRACING
              value: "{{ .Values.tracing.enabled }}"
            # It should be CLUSTER_TRACING_JAEGERAGENTENDPOINT case of initialization errors, change it to CLUSTER_TRACING_JAEGERAGENT_ENDPOINT
            - name: CLUSTER_TRACING_JAEGERAGENT_ENDPOINT
              value: "{{ .Values.tracing.jaegerAgentEndpoint }}"
            - name: CLUSTER_TRACING_SAMPLINGPROB
              value: "{{ .Values.tracing.samplingProb }}"
            - name: CLUSTER_TRACING_SERVICENAME
              value: "{{ .Release.Name }}"
            {{- end }}
          ports:
            - name: api-http
              containerPort: 9094
              protocol: TCP
            - name: proxy-http
              containerPort: 9095
              protocol: TCP
            - name: cluster-swarm
              containerPort: 9096
              protocol: TCP
            - name: restapi-swarm
              containerPort: 9098
              protocol: TCP
            - name: metrics
              containerPort: 8888
              protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - /custom/peers-health-check.sh
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: cluster-swarm
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
          volumeMounts:
            - name: cluster-storage
              mountPath: /data/ipfs-cluster
            - name: configure-script
              mountPath: /custom
            - name: health-storage
              mountPath: /data/health
          resources:
            {}    
      volumes:
        - name: configure-script
          configMap:
            name: {{ include "ipfs-cluster.configmapBootstrapName" . }}     
        - name: health-storage
          emptyDir: {}
        {{ if ne .Values.persistence.enabled true }}    
        - name: cluster-storage
          emptyDir: {}
        - name: ipfs-storage
          emptyDir: {}  
        {{ else }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:  
    - metadata:
        name: cluster-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.clusterStorage }}
    - metadata:
        name: ipfs-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.ipfsStorage }}
        {{ end }}
